
新项目的git路径
前端：https://github.com/WeAreAntFamily/MyTribe_Frontend.git
后端：https://github.com/WeAreAntFamily/MyTribe_Backend.git


项目规定：命名统一采用驼峰命名法

总的注意事项一：方法的参数的个数量原则不能超过5个，最好控制在三个以内，如果有超过5个的情况，把这5个参数封装成一个小对象，这样就改成一个参数传递！
总的注意事项二：方法名尽量使用英文，如果英文不怎样或者不确定用哪个英文单词时，建议直接使用汉语全拼，主要是要自己和同事能看明白是什么，不要随便用友道查个词用就用，过一会儿后自己都不知道是干嘛的！
总的注意事项三：变量名统一采用 变量数据类型+表示变量数据含义的词，反过来也行，但一定要把数据类型包含在变量名里边，当然可以简写，成员变量前加m，全局变量前g,返回值变量带个ret...
总的注意事项四：代码里边不要出现魔鬼数字，尽量用宏和常量代替
总的注意事项五：代码文件代码行数尽量控制在1000行内，单个方法和函数尽量控制在100行内
总的注意事项六：最后一条但是最重要的一条，写代码一定要加注释，这个不怕多
具体规则如下：

1.使用能够表达意图的名字
名字得能告诉我们它要做什么，为什么存在，以及是如何工作的。选择能够表达意图的名字，将更有利于我们理解代码。
int d; // elapsed time in days
 
int elapsedTimeInDays;
int daysSinceCreation;
int daysSinceModification;
int fileAgeInDays;
在上面的片段中，我们只能从注释中知道变量d指的是什么。于是阅读代码的人为了知道它的含义就不得不去寻找它的实例以获取线索。所以，要是我们能够好好命名这个变量，阅读代码的人就能够瞬间知道这变量的含义。
2.不要怕在选择名字上花时间
你应该多试几种不同的名字，直至足以描述其含义，千万不要害怕在这上面花时间。以后阅读你代码的人（包括你自己）将会因此而受益。此外，一个描述性的名称甚至还能有助于你在心中理清模块的设计。良好的命名的确需要花费时间，但是从长远来看，利大于弊。
3.重构名字
如果你在后面的开发过程中想到了一个更好的名字，那就不要犹豫，马上去改吧。现在的IDE使得重构名字变得异常容易。
4.避免在名字中出现干扰词
比如Manager、Processor、Data、Info以及“我不知道这叫什么”的同义词，都是干扰词。如果你需要使用上面这些干扰词的话，那么说明你的命名可能太累赘了。
5.小心难以命名的类/功能
一个很难命名的类或函数很有可能是一个代码异味。这说明：
代码做得太多。
代码做得还不够。
你对此问题理解得还不够透彻，需要先获取更多的信息。
6.类名
类应该有个名词或名词词组的名字，如Customer、WikiPage、Account和AddressParser。继承性父类应该给个又短又有冲击力的名字。子类的名字应该长点，通过形容词来描述其不同于它的父类之处，如SavingsAccount衍生于Account。
7.变量名
变量名也应该是名词。它们大多是由其指向的类衍生出去的。布尔变量应写成谓词的形式，如isEmpty和isTerminated，这样放到if语句才便于理解。
8.方法名
方法名应该是一个动词或动词词组，如postPayment()、deletePage()和save()。访问器和调整器应该分别前缀get和set。返回布尔值的方法应该前缀‘is'，如isPostable()，这样在if语句中才便于理解。
9.范围大小与变量名的长度
变量名的长度应和它的范围大小相匹配。如果变量的范围很短，那么变量名的长度也应该很短。反之，变量名则应该长一点，更有描述性。
10.范围大小与方法/类名的长度
对于方法和类名的长度则应该与其范围成反比。对于公共方法，短一点的名字会比较好，这是因为它们会被调用多次。私有方法只在类的范围内被调用，长一点的名字反而可以作为文档使用。此条规则的例外是派生类的名字。类越派生，基类前所加的形容词就越多，名字也就越长。
11.一个概念一个词
为某个抽象概念选定一个词，然后就不要变了。例如作为不同类中的等效方法，get()、fetch()和retrieve()会让人混淆起来。保持一致的词汇是程序员驾驭代码的重要工具。
12.不要将同一个词用于两个不同的概念
如果你遵循第11点——一个概念一个词的原则，那么就可以避免许多有着相同方法名的类。只要参数列表和各种方法的返回值在语义上是等价的就没问题。只有当你将同一个词用于两个不同的概念时才会出现问题。
例如，我们可以在多个类中使用add()方法，通过添加或连接两个现有的值来创建一个新的值。如果我们之后又需要在类中引入一个add方法用于添加参数到集合中，这就会因为语义不同而导致问题。这种新方法最好是改叫为insert()。
13.使用解决方案领域的名字
我们编写的代码今后可能会有其他程序员来阅读，所以我们使用一些技术术语进行代码命名会带来很大的好处。比如适当地使用算法名字、设计模式名字以及数学术语，这些命名方式很可能会让其他程序员更容易理解程序，引起共鸣。
14.使用问题领域的名字
如果实在找不到易于理解的技术术语来命名，那么也可以从问题领域来寻找合适的代码命名。当未来阅读你代码的程序员不确定代码意义的时候，这将为他们提供一些问题的线索。
15.添加有意义的语境
大多数名字其本身是没有意义的，并且需要放到语境（类/函数/命名空间）中，才能让阅读代码的人理解它们指代的是什么。在某些情况下，可能需要前缀名称以补充语境。例如，假设我们有一些用来表示地址的变量：firstName、lastName、street、houseNumber、city、state和zip。如果只看state这个变量，我们是很难推断出它指的是什么意思，一个比较好的解决办法就是将这些变量封装到Address类中。
16.不要添加没来由的语境
只要意思明确，短一点的名字通常比长的好，所以不要多此一举地添加语境。名字前不应该被加缀一些可以从类/包/命名空间中推断的不必要的信息。
17.避免编码
鉴于现在的IDE的强大，我们已经不需要编码类型和范围信息到变量名和类名中。这包括不必添加I至接口，因为使用代码的用户不需要知道他们的类正在向接口传递。所以如果你一定要使用编码，那么最好是对实现进行编码而不是接口。
18.避免错误的信息
不要给一些错误的信息，因为这样会误导阅读代码的人。如果你将一个实际支持数组的变量命名为accountList，那就很容易让人得出错误的结论。
19.使用读不出来的名字
编程是一个社会化的活动，使用那些读不出来的名字只会阻碍我们的讨论。
20.使用易搜索的名字
使用短而通用的名字会妨碍我们在代码库中搜索事物。这对我们操纵代码和重构很有影响。
